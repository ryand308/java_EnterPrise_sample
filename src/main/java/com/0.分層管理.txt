1.
測試版本：

[Servlet 層]      -> [Service 層]     -> {   偽[Service 層] ->  [DAO 層]    } = [DAO 層]
(@WebServlet)           被忽略		        (@Stateless)  +    (@Dependent)

尚未了解 EJB 的特性與 CDI 注入依賴間的關係；從而瞭解到@EJB 不只是只能置入Servlet tier，和 EJB 與 CDI 之間的注入。


偽[Servlet 層] + [DAO 層]  = [DAO 層]
這樣 DAO 層變成了一個“偽 Service 層”，因為它不只是做資料庫操作，還可能包含了一些業務邏輯，導致職責不清晰。

*****************************************************************************************************
*****************************************************************************************************

2.
正規版：
[Servlet 層]      ->  [Service 層]         ->  [DAO 層]
(@WebServlet)         (@ApplicationScoped)     (@Stateless)

Spring boot:

@Controller           @Service                 @Repository
*****************************************************************************************************
[DAO 層]
(@Stateless/@Stateful/@Dependent)

-----------------------------------------------------------------------------------------------
@Stateless
public class StudentJpaDaoImpl {

    @PersistenceContext
    private EntityManager em;

    public void doSomething() {
        // 資料庫操作
    }
}

*****************************************************************************************************
[Service 層]
(@ApplicationScoped/@RequestScoped)
負責 業務邏輯 (Business Logic)，例如驗證數據、計算、處理請求

1.@ApplicationScoped (全應用範圍)，負責商業邏輯 @ApplicationScoped (建議) ；近似於Spring boot 的@Serivce
2.@RequestScoped (請求範圍)，如果 Service 層需要在 每個請求期間擁有新的實例（例如處理一些請求狀態的邏輯）

-----------------------------------------------------------------------------------------------
@ApplicationScoped // 或 @RequestScoped 取決於需求
public class StudentService {
    
    @EJB
    private StudentJpaDaoImpl studentDao; // DAO 層被標註為 @Stateless，所以可以用 @EJB

    public void someBusinessLogic() {
        studentDao.doSomething();
    }
}

*****************************************************************************************************
[Servlet 層]
(@WebServlet)

-----------------------------------------------------------------------------------------------
@WebServlet("/studentServlet")
public class StudentServlet extends HttpServlet {

    @Inject // 用 CDI 來管理 Service 層
    private StudentService studentService;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        studentService.someBusinessLogic();
        response.getWriter().println("Success");
    }
}
